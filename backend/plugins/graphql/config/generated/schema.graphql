input createExaminationInput {
  data: ExaminationInput
}

type createExaminationPayload {
  examination: Examination
}

input createExamuserInput {
  data: ExamuserInput
}

type createExamuserPayload {
  examuser: Examuser
}

input createQuestionInput {
  data: QuestionInput
}

type createQuestionPayload {
  question: Question
}

input createResultInput {
  data: ResultInput
}

type createResultPayload {
  result: Result
}

input createRoleInput {
  data: RoleInput
}

type createRolePayload {
  role: UsersPermissionsRole
}

input createUserInput {
  data: UserInput
}

type createUserPayload {
  user: UsersPermissionsUser
}

"""
The `DateTime` scalar represents a date and time following the ISO 8601 standard
"""
scalar DateTime

input deleteExaminationInput {
  where: InputID
}

type deleteExaminationPayload {
  examination: Examination
}

input deleteExamuserInput {
  where: InputID
}

type deleteExamuserPayload {
  examuser: Examuser
}

input deleteQuestionInput {
  where: InputID
}

type deleteQuestionPayload {
  question: Question
}

input deleteResultInput {
  where: InputID
}

type deleteResultPayload {
  result: Result
}

input deleteRoleInput {
  where: InputID
}

type deleteRolePayload {
  role: UsersPermissionsRole
}

input deleteUserInput {
  where: InputID
}

type deleteUserPayload {
  user: UsersPermissionsUser
}

input editExaminationInput {
  name: String
  description: String
  questions: [ID]
  code: Int
  private: Boolean
  startTime: DateTime
  endTime: DateTime
  examTime: Int
}

input editExamuserInput {
  email: String
  examCode: Int
}

input editFileInput {
  name: String
  hash: String
  sha256: String
  ext: String
  mime: String
  size: String
  url: String
  provider: String
  public_id: String
  related: [ID]
}

input editQuestionInput {
  question: String
  examination: ID
  answerA: String
  answerB: String
  answerC: String
  answerD: String
  answer: ENUM_QUESTION_ANSWER
}

input editResultInput {
  point: Float
  datetime: DateTime
  email: String
  examCode: Int
  username: String
}

input editRoleInput {
  name: String
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input editUserInput {
  username: String
  email: String
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

enum ENUM_QUESTION_ANSWER {
  A
  B
  C
  D
}

type Examination {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  description: String
  code: Int!
  private: Boolean!
  startTime: DateTime!
  endTime: DateTime!
  examTime: Int
  questions(sort: String, limit: Int, start: Int, where: JSON): [Question]
}

input ExaminationInput {
  name: String!
  description: String
  questions: [ID]
  code: Int!
  private: Boolean!
  startTime: DateTime!
  endTime: DateTime!
  examTime: Int
}

type Examuser {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  email: String
  examCode: Int
}

input ExamuserInput {
  email: String
  examCode: Int
}

input FileInput {
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related: [ID]
}

input InputID {
  id: ID!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""The `Long` scalar type represents 52-bit integers"""
scalar Long

union Morph = UsersPermissionsMe | UsersPermissionsMeRole | Examination | createExaminationPayload | updateExaminationPayload | deleteExaminationPayload | Examuser | createExamuserPayload | updateExamuserPayload | deleteExamuserPayload | Question | createQuestionPayload | updateQuestionPayload | deleteQuestionPayload | Result | createResultPayload | updateResultPayload | deleteResultPayload | UploadFile | UsersPermissionsPermission | UsersPermissionsRole | createRolePayload | updateRolePayload | deleteRolePayload | UsersPermissionsUser | createUserPayload | updateUserPayload | deleteUserPayload

type Mutation {
  createExamination(input: createExaminationInput): createExaminationPayload
  updateExamination(input: updateExaminationInput): updateExaminationPayload
  deleteExamination(input: deleteExaminationInput): deleteExaminationPayload
  createExamuser(input: createExamuserInput): createExamuserPayload
  updateExamuser(input: updateExamuserInput): updateExamuserPayload
  deleteExamuser(input: deleteExamuserInput): deleteExamuserPayload
  createQuestion(input: createQuestionInput): createQuestionPayload
  updateQuestion(input: updateQuestionInput): updateQuestionPayload
  deleteQuestion(input: deleteQuestionInput): deleteQuestionPayload
  createResult(input: createResultInput): createResultPayload
  updateResult(input: updateResultInput): updateResultPayload
  deleteResult(input: deleteResultInput): deleteResultPayload

  """Create a new role"""
  createRole(input: createRoleInput): createRolePayload

  """Update an existing role"""
  updateRole(input: updateRoleInput): updateRolePayload

  """Delete an existing role"""
  deleteRole(input: deleteRoleInput): deleteRolePayload

  """Create a new user"""
  createUser(input: createUserInput): createUserPayload

  """Update an existing user"""
  updateUser(input: updateUserInput): updateUserPayload

  """Delete an existing user"""
  deleteUser(input: deleteUserInput): deleteUserPayload
  upload(refId: ID, ref: String, source: String, file: Upload!): UploadFile!
}

type Query {
  examination(id: ID!): Examination
  examinations(sort: String, limit: Int, start: Int, where: JSON): [Examination]
  examuser(id: ID!): Examuser
  examusers(sort: String, limit: Int, start: Int, where: JSON): [Examuser]
  question(id: ID!): Question
  questions(sort: String, limit: Int, start: Int, where: JSON): [Question]
  result(id: ID!): Result
  results(sort: String, limit: Int, start: Int, where: JSON): [Result]
  files(sort: String, limit: Int, start: Int, where: JSON): [UploadFile]
  role(id: ID!): UsersPermissionsRole

  """
  Retrieve all the existing roles. You can't apply filters on this query.
  """
  roles(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsRole]
  user(id: ID!): UsersPermissionsUser
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
  me: UsersPermissionsMe
}

type Question {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  question: String!
  examination: Examination
  answerA: String
  answerB: String
  answerC: String
  answerD: String
  answer: ENUM_QUESTION_ANSWER
}

input QuestionInput {
  question: String!
  examination: ID
  answerA: String
  answerB: String
  answerC: String
  answerD: String
  answer: ENUM_QUESTION_ANSWER
}

type Result {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  point: Float!
  datetime: DateTime
  email: String
  examCode: Int
  username: String
}

input ResultInput {
  point: Float!
  datetime: DateTime
  email: String
  examCode: Int
  username: String
}

input RoleInput {
  name: String!
  description: String
  type: String
  permissions: [ID]
  users: [ID]
}

input updateExaminationInput {
  where: InputID
  data: editExaminationInput
}

type updateExaminationPayload {
  examination: Examination
}

input updateExamuserInput {
  where: InputID
  data: editExamuserInput
}

type updateExamuserPayload {
  examuser: Examuser
}

input updateQuestionInput {
  where: InputID
  data: editQuestionInput
}

type updateQuestionPayload {
  question: Question
}

input updateResultInput {
  where: InputID
  data: editResultInput
}

type updateResultPayload {
  result: Result
}

input updateRoleInput {
  where: InputID
  data: editRoleInput
}

type updateRolePayload {
  role: UsersPermissionsRole
}

input updateUserInput {
  where: InputID
  data: editUserInput
}

type updateUserPayload {
  user: UsersPermissionsUser
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  id: ID!
  created_at: DateTime!
  updated_at: DateTime!
  name: String!
  hash: String!
  sha256: String
  ext: String
  mime: String!
  size: String!
  url: String!
  provider: String!
  public_id: String
  related(sort: String, limit: Int, start: Int, where: JSON): [Morph]
}

input UserInput {
  username: String!
  email: String!
  provider: String
  password: String
  resetPasswordToken: String
  confirmed: Boolean
  blocked: Boolean
  role: ID
}

type UsersPermissionsMe {
  _id: ID!
  username: String!
  email: String!
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsMeRole
}

type UsersPermissionsMeRole {
  _id: ID!
  name: String!
  description: String
  type: String
}

type UsersPermissionsPermission {
  id: ID!
  type: String!
  controller: String!
  action: String!
  enabled: Boolean!
  policy: String
  role: UsersPermissionsRole
}

type UsersPermissionsRole {
  id: ID!
  name: String!
  description: String
  type: String
  permissions(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsPermission]
  users(sort: String, limit: Int, start: Int, where: JSON): [UsersPermissionsUser]
}

type UsersPermissionsUser {
  id: ID!
  username: String!
  email: String!
  provider: String
  confirmed: Boolean
  blocked: Boolean
  role: UsersPermissionsRole
}
